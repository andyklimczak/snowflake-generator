{"mappings":"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","sources":["index.js","node_modules/snowflake-id/src/snowflake-id.js","node_modules/snowflake-id/src/hex2dec.js"],"sourcesContent":["// var SnowflakeId = require('snowflake-id');\n\nimport SnowflakeId from \"snowflake-id\";\n\nconst DEFAULT_MID = 42\nconst DEFAULT_OFFSET = (2019-1970)*31536000*1000\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n    handleGenerateSnowflakeId()\n\n    const button = document.getElementById(\"snowflake-id-generate\")\n    button.addEventListener(\"click\", (e) => {\n        e.preventDefault()\n        handleGenerateSnowflakeId()\n    })\n});\n\nconst handleGenerateSnowflakeId = () => {\n    const mid = getDomMid()\n    const offset = getDomOffset()\n    let snowflakeId = generateSnowflakeId(mid, offset)\n    updateSnowflakeIdDom(snowflakeId)\n}\n\n\nconst generateSnowflakeId = (mid, offset) => {\n    var snowflake = new SnowflakeId({\n        mid: mid ,\n        offset: offset,\n    });\n    return snowflake.generate();\n}\n\nconst updateSnowflakeIdDom = (snowflakeId) => {\n    const el = document.getElementById(\"snowflake-id\")\n    el.innerText = snowflakeId\n}\n\nconst getDomMid = () => {\n    const el = document.getElementById(\"mid\")\n    const value = el.value.trim().length ? DEFAULT_MID : el.value\n    return value\n}\n\nconst getDomOffset = () => {\n    const el = document.getElementById(\"offset\")\n    const value = el.value.trim().length ? DEFAULT_OFFSET : el.value\n    return value\n}\n","import {hexToDec} from './hex2dec';\r\n\r\nexport default class Snowflake {\r\n  constructor(options) {\r\n    options = options || {};\r\n    this.seq = 0;\r\n    this.mid = (options.mid || 1) % 1023;\r\n    this.offset = options.offset || 0;\r\n    this.lastTime = 0;\r\n  }\r\n  \r\n  generate() {\r\n    const time = Date.now(),\r\n    bTime = (time - this.offset).toString(2);\r\n\r\n    // get the sequence number\r\n    if (this.lastTime == time) {\r\n      this.seq++;\r\n\r\n      if (this.seq > 4095) {\r\n        this.seq = 0;\r\n\r\n        // make system wait till time is been shifted by one millisecond\r\n        while (Date.now() <= time) {}\r\n      }\r\n    } else {\r\n      this.seq = 0;\r\n    }\r\n\r\n    this.lastTime = time;\r\n\r\n    let bSeq = this.seq.toString(2),\r\n      bMid = this.mid.toString(2);\r\n\r\n    // create sequence binary bit\r\n    while (bSeq.length < 12) bSeq = \"0\" + bSeq;\r\n\r\n    while (bMid.length < 10) bMid = \"0\" + bMid;\r\n\r\n    const bid = bTime + bMid + bSeq;\r\n    let id = \"\";\r\n\r\n    for (let i = bid.length; i > 0; i -= 4) {\r\n      id = parseInt(bid.substring(i - 4, i), 2).toString(16) + id;\r\n    }\r\n\r\n    return hexToDec(id);\r\n  }\r\n}\r\n","/**\r\n * A function for converting hex <-> dec w/o loss of precision.\r\n * By Dan Vanderkam http://www.danvk.org/hex2dec.html\r\n */\r\n\r\n// Adds two arrays for the given base (10 or 16), returning the result.\r\n// This turns out to be the only \"primitive\" operation we need.\r\nfunction add(x, y, base) {\r\n  var z = [];\r\n  var n = Math.max(x.length, y.length);\r\n  var carry = 0;\r\n  var i = 0;\r\n  while (i < n || carry) {\r\n    var xi = i < x.length ? x[i] : 0;\r\n    var yi = i < y.length ? y[i] : 0;\r\n    var zi = carry + xi + yi;\r\n    z.push(zi % base);\r\n    carry = Math.floor(zi / base);\r\n    i++;\r\n  }\r\n  return z;\r\n}\r\n\r\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\r\n// JavaScript number. base is the number base of the array x.\r\nfunction multiplyByNumber(num, x, base) {\r\n  if (num < 0) return null;\r\n  if (num == 0) return [];\r\n\r\n  var result = [];\r\n  var power = x;\r\n  while (true) {\r\n    if (num & 1) {\r\n      result = add(result, power, base);\r\n    }\r\n    num = num >> 1;\r\n    if (num === 0) break;\r\n    power = add(power, power, base);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction parseToDigitsArray(str, base) {\r\n  var digits = str.split(\"\");\r\n  var ary = [];\r\n  for (var i = digits.length - 1; i >= 0; i--) {\r\n    var n = parseInt(digits[i], base);\r\n    if (isNaN(n)) return null;\r\n    ary.push(n);\r\n  }\r\n  return ary;\r\n}\r\n\r\nfunction convertBase(str, fromBase, toBase) {\r\n  var digits = parseToDigitsArray(str, fromBase);\r\n  if (digits === null) return null;\r\n\r\n  var outArray = [];\r\n  var power = [1];\r\n  for (var i = 0; i < digits.length; i++) {\r\n    // invariant: at this point, fromBase^i = power\r\n    if (digits[i]) {\r\n      outArray = add(\r\n        outArray,\r\n        multiplyByNumber(digits[i], power, toBase),\r\n        toBase\r\n      );\r\n    }\r\n    power = multiplyByNumber(fromBase, power, toBase);\r\n  }\r\n\r\n  var out = \"\";\r\n  for (var i = outArray.length - 1; i >= 0; i--) {\r\n    out += outArray[i].toString(toBase);\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function hexToDec(hexStr) {\r\n  if (hexStr.substring(0, 2) === \"0x\") hexStr = hexStr.substring(2);\r\n  hexStr = hexStr.toLowerCase();\r\n  return convertBase(hexStr, 16, 10);\r\n}\r\n"],"names":[],"version":3,"file":"index.16bc53c3.js.map"}